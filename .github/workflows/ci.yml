name: Build Auritia

on: [push, pull_request]

jobs:
  build-linux:
    name: "🐧 Compile for Linux"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.value }}
    steps: 

    - name: 🧪 Environment Info
      run: "npx envinfo"

    - name: 🛎 Checkout
      uses: actions/checkout@v2

    - name: ⚡ Install Tauri
      run: sudo apt install -y --no-install-recommends libwebkit2gtk-4.0-dev build-essential curl wget sudo libssl-dev libgtk-3-dev patchelf librsvg2-dev curl jq build-essential libssl-dev libffi-dev python3 python3-venv python3-dev python3-pip
    
    - name: ⚡ Install ALSA
      run: sudo apt install -y alsa-utils libasound2-dev
    
    - name: ⚡ Install FUSE
      run: sudo apt install -y libfuse-dev
    
    - name: ⚡ Install NPM Dependancies
      run: "npm i"

    - name: ⚡ Set Version Variable
      id: version
      run: >
        echo "::set-output name=value::$(node --eval "console.log(require('./package.json').version)")"

    - name: 🛠 Build 
      run: npm run compile
      
    - name: 🗳 Upload bundle Debian artifact
      uses: actions/upload-artifact@v1
      with:
        name: Auritia_v{{ steps.version.outputs.value }}_linux.deb
        path: src-tauri/target/release/bundle/deb/auritia_${{ steps.version.outputs.value }}_amd64.deb
    
    - name: 🗳 Upload bundle AppImage artifact
      uses: actions/upload-artifact@v1
      with:
        name: Auritia_v${{ steps.version.outputs.value }}_linux.AppImage
        path: src-tauri/target/release/bundle/appimage/auritia_${{ steps.version.outputs.value }}_amd64.AppImage

  build-windows:
    name: "🌬 Compile for Windows"
    runs-on: windows-latest
    steps: 

    - name: 🧪 Environment Info
      run: "npx envinfo"

    - name: 🛎 Checkout
      uses: actions/checkout@v2

    - name: ⚡ Install NPM Dependancies
      run: "npm i"

    - name: ⚡ Set Version Variable
      id: version
      run: >
        echo "::set-output name=value::$(node --eval "console.log(require('./package.json').version)")"

    - name: 🛠 Build 
      run: npm run compile

    - name: 🗳 Upload bundle artifact
      uses: actions/upload-artifact@v1
      with:
        name: Auritia_v${{ steps.version.outputs.value }}_win.msi
        path: src-tauri/target/release/bundle/msi/Auritia_${{ steps.version.outputs.value }}_x64.msi

  create-release:
    name: "📦 Create Release"
    # runs-on: ubuntu-latest
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      
      # The release script that prepares a new Github release
      - name: ⚡ Create Release
        uses: actions/create-release@v1
        id: create_release
        continue-on-error: true
        with:
          draft: false
          prerelease: false
          release_name: Auritia v${{ needs.build-linux.outputs.version }}
          tag_name: v${{ needs.build-linux.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  upload: 
    name: "📤 Upload Builds"
    # runs-on: ubuntu-latest
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, create-release]
    strategy:
      matrix: 
       targetPlatform:
          - linux.deb
          - linux.AppImage
          - win.msi
      fail-fast: false
    steps:

      # Download the artifacts
      - name: 💎 Download ${{matrix.targetPlatform}} binaries
        uses: actions/download-artifact@v2
        with:
          name: Auritia_v${{ needs.build-linux.outputs.version }}_${{matrix.targetPlatform}}
          path: installers

      # Upload Release
      - name: 💎 Upload ${{matrix.targetPlatform}} artifact
        uses: actions/upload-release-asset@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: installers/Auritia_v${{ needs.build-linux.outputs.version }}_${{ matrix.targetPlatform }}
          asset_name: Auritia_v${{ needs.build-linux.outputs.version }}_${{matrix.targetPlatform}}
          asset_content_type: application/octet-stream